#!/bin/bash

# 1Password Workflow Script
# This script helps you work with 1Password-secured environment variables locally

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîê 1Password Workflow Helper${NC}"
echo ""

# Check if 1Password CLI is installed
if ! command -v op &> /dev/null; then
    echo -e "${RED}‚ùå 1Password CLI is not installed${NC}"
    echo "Install it with: brew install 1password-cli"
    exit 1
fi

# Check if signed in
if ! op account list &> /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Not signed in to 1Password${NC}"
    echo "Please run: op signin"
    exit 1
fi

# Function to create environment file with 1Password references
create_env_file() {
    local env_file="$1"
    local env_type="$2"
    
    echo -e "${BLUE}üìù Creating $env_file for $env_type environment${NC}"
    
    cat > "$env_file" << 'EOF'
# Auto-generated by op-workflow.sh - DO NOT EDIT MANUALLY
# This file is generated from 1Password secrets for maximum security

# Database & Infrastructure
DATABASE_URL="op://Development Credentials/Supabase API Credentials/credential"
SUPABASE_URL="op://Development Credentials/Supabase API Credentials/credential"
SUPABASE_ANON_KEY="op://Development Credentials/Supabase API Credentials/credential"
SUPABASE_SERVICE_ROLE_KEY="op://Development Credentials/Supabase API Credentials/credential"

# AI & ML Services
OPENAI_API_KEY="op://Development Credentials/OpenAI_API_Key/credential"
ANTHROPIC_API_KEY="op://Development Credentials/Anthropic Admin - API Credential/credential"
PINECONE_API_KEY="op://Development Credentials/Pinecone API Credential/credential"

# External APIs
FIRECRAWL_API_KEY="op://Development Credentials/FIRECRAWL_API_KEY/credential"
BRX_API_TOKEN="op://Development Credentials/BRX API Credentials/credential"
BRX_BEARER_TOKEN="op://Development Credentials/BRX API Credentials/credential"

# Authentication & Security
NEXTAUTH_SECRET="op://Development Credentials/localhost/password"
NEXTAUTH_URL="http://localhost:3000"
JWT_SECRET="op://Development Credentials/localhost/password"

# Development Settings
NODE_ENV=development
NEXT_TELEMETRY_DISABLED=1
VERCEL_ENV=development

# AI Agent Configuration
AI_AGENT_AUTONOMOUS=true
AI_AGENT_SESSION_TIMEOUT=7200
EOF
    
    echo -e "${GREEN}‚úÖ Created $env_file${NC}"
}

# Function to validate 1Password references
validate_references() {
    local env_file="$1"
    
    echo -e "${BLUE}üîç Validating 1Password references in $env_file${NC}"
    
    # Extract all op:// references
    local references=$(grep -o '"op://[^"]*"' "$env_file" | sed 's/"//g' || true)
    local errors=0
    
    for ref in $references; do
        echo -n "  Checking $ref ... "
        if op read "$ref" &> /dev/null; then
            echo -e "${GREEN}‚úÖ${NC}"
        else
            echo -e "${RED}‚ùå${NC}"
            ((errors++))
        fi
    done
    
    if [ $errors -eq 0 ]; then
        echo -e "${GREEN}‚úÖ All references are valid${NC}"
    else
        echo -e "${RED}‚ùå Found $errors invalid references${NC}"
        echo "Please check your 1Password vault and item names"
        return 1
    fi
}

# Function to run commands with 1Password environment
run_with_op() {
    local env_file="$1"
    shift
    local cmd="$@"
    
    echo -e "${BLUE}üöÄ Running: $cmd${NC}"
    echo -e "${YELLOW}   Using environment from: $env_file${NC}"
    
    op run --env-file="$env_file" -- $cmd
}

# Main script logic
case "${1:-help}" in
    "create-env")
        create_env_file "brx-app/.env.local" "development"
        ;;
    "validate")
        if [ -f "brx-app/.env.local" ]; then
            validate_references "brx-app/.env.local"
        else
            echo -e "${RED}‚ùå No .env.local file found${NC}"
            echo "Run: ./op-workflow.sh create-env"
            exit 1
        fi
        ;;
    "dev")
        cd brx-app
        run_with_op ".env.local" npm run dev
        ;;
    "build")
        cd brx-app
        run_with_op ".env.local" npm run build
        ;;
    "test")
        cd brx-app
        run_with_op ".env.local" npm run test:e2e
        ;;
    "lint")
        cd brx-app
        run_with_op ".env.local" npm run lint
        ;;
    "help"|*)
        echo -e "${GREEN}Available commands:${NC}"
        echo ""
        echo -e "${BLUE}  create-env${NC}  - Create .env.local with 1Password references"
        echo -e "${BLUE}  validate${NC}    - Validate all 1Password references"
        echo -e "${BLUE}  dev${NC}         - Start development server with 1Password secrets"
        echo -e "${BLUE}  build${NC}       - Build application with 1Password secrets"
        echo -e "${BLUE}  test${NC}        - Run E2E tests with 1Password secrets"
        echo -e "${BLUE}  lint${NC}        - Run linting with 1Password secrets"
        echo -e "${BLUE}  help${NC}        - Show this help message"
        echo ""
        echo -e "${YELLOW}Usage examples:${NC}"
        echo "  ./op-workflow.sh create-env"
        echo "  ./op-workflow.sh validate"
        echo "  ./op-workflow.sh dev"
        ;;
esac