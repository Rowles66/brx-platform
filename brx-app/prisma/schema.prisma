// Enhanced Prisma Schema for BRX Performance App
// Generated from: UI Forms, API Schemas, and Business Logic Analysis
// Sources: Scraped forms (SignIn/SignUp), tRPC routers, existing models
// Last updated: 2025-05-29

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User model - merged from forms and API schemas + BRX API data
model User {
  id       String  @id @default(cuid())
  email    String  @unique // From SignIn/SignUp forms and API
  name     String? // From SignUp form and API
  password String // From authentication forms

  // Authentication preferences
  rememberMe Boolean @default(false) // From SignIn form

  // BRX Platform specific fields
  brxUserId    Int?    @unique // Original BRX user ID for data migration
  firstName    String?
  lastName     String?
  nickname     String?
  phoneNumber  String?
  timeZone     String?
  website      String?
  trainerBio   String?
  aboutMe      String?
  profileImage String?

  // BRX Platform metrics
  totalCalories   Int   @default(0)
  currentFrcScore Int   @default(0)
  numWorkouts     Int   @default(0)
  numBadges       Int   @default(0)
  level           Int   @default(1)
  points          Int   @default(0)
  levelCompletion Float @default(0)
  pointsUntilNext Int   @default(0)

  // User preferences and settings
  hideMobileAppBanner      Boolean @default(false)
  showActivity             Boolean @default(true)
  trainerMessagingDisabled Boolean @default(false)

  // User type and roles
  roles String[] // ["trainer", "user", "business"]
  tags  String[]

  // Relationships
  workouts          Workout[]
  exercises         UserExercise[]
  sessions          UserSession[]
  programs          Program[]
  messages          Message[]
  measurements      UserMeasurement[]
  favoriteExercises Int[] // Exercise IDs

  // FBM Business relationships
  trainerAppointments FbmAppointment[]     @relation("TrainerAppointments")
  clientAppointments  FbmAppointment[]     @relation("ClientAppointments")
  trainerVisits       FbmVisit[]           @relation("TrainerVisits")
  clientVisits        FbmVisit[]           @relation("ClientVisits")
  packagePurchases    FbmPackagePurchase[] @relation("ClientPackages")
  schedules           FbmSchedule[]

  // Analytics relationships
  clientAnalytics     ClientAnalytics?     @relation("ClientAnalytics")
  trainerAnalytics    TrainerAnalytics[]   @relation("TrainerAnalytics")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Enhanced Exercise model with BRX Performance specifics
model Exercise {
  id          String  @id @default(cuid())
  name        String
  description String?
  category    String? // e.g., "Strength", "Cardio", "Flexibility"
  difficulty  String? // e.g., "Beginner", "Intermediate", "Advanced"

  // BRX Performance specific fields
  muscleGroups String[] // Array of targeted muscle groups
  equipment    String? // Required equipment
  instructions String? // Step-by-step instructions

  // Media and resources
  imageUrl String?
  videoUrl String?

  // Relationships
  userExercises    UserExercise[]
  workoutExercises WorkoutExercise[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("exercises")
}

// User's personalized exercise data
model UserExercise {
  id         String @id @default(cuid())
  userId     String
  exerciseId String

  // Personal records and preferences
  personalBest Json? // Store PR data as JSON
  preferences  Json? // User's exercise preferences
  notes        String?

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, exerciseId])
  @@map("user_exercises")
}

// Workout sessions
model Workout {
  id          String  @id @default(cuid())
  userId      String
  programId   String? // Optional: workouts can be part of a program
  name        String
  description String?

  // Workout metadata
  duration Int? // Duration in minutes
  status   WorkoutStatus @default(PLANNED)

  // Relationships
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  program   Program?          @relation(fields: [programId], references: [id], onDelete: SetNull)
  exercises WorkoutExercise[]

  // Timestamps
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("workouts")
}

// Many-to-many relationship between Workouts and Exercises
model WorkoutExercise {
  id         String @id @default(cuid())
  workoutId  String
  exerciseId String

  // Exercise session data
  sets     Int?
  reps     Int?
  weight   Float?
  duration Int? // Duration in seconds for time-based exercises
  rest     Int? // Rest time in seconds

  // Session notes and completion
  notes     String?
  completed Boolean @default(false)

  // Relationships
  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workoutId, exerciseId])
  @@map("workout_exercises")
}

// Authentication and session management
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime

  // Session metadata
  userAgent String?
  ipAddress String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_sessions")
}

// Program model for structured workout programs
model Program {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?

  // Program metadata
  duration   Int? // Duration in weeks
  difficulty String? // e.g., "Beginner", "Intermediate", "Advanced"
  goals      String[] // e.g., ["Strength", "Weight Loss", "Muscle Gain"]

  // Program scheduling
  status    ProgramStatus @default(ACTIVE)
  startDate DateTime?
  endDate   DateTime?

  // Relationships
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts Workout[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("programs")
}

// Message model for coach-client communication
model Message {
  id      String      @id @default(cuid())
  userId  String
  content String
  type    MessageType @default(TEXT)

  // Message metadata
  isRead   Boolean         @default(false)
  priority MessagePriority @default(NORMAL)

  // Optional references
  workoutId String?
  programId String?

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Timestamps
  sentAt    DateTime  @default(now())
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("messages")
}

// Enums
enum WorkoutStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProgramStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum MessageType {
  TEXT
  WORKOUT_REMINDER
  PROGRAM_UPDATE
  ACHIEVEMENT
  SYSTEM
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// BRX Platform-specific models

// Measurement types from BRX platform (100+ metrics)
model MeasurementType {
  id          String  @id @default(cuid())
  name        String  @unique // e.g., "20-yd Dash", "Vertical Jump"
  category    String // e.g., "Speed", "Power", "Strength"
  unit        String? // e.g., "seconds", "inches", "mph"
  description String?

  // BRX specific fields
  brxStatKey String? // Original BRX stat key
  hidden     Boolean @default(false)
  isDefault  Boolean @default(false)

  // Relationships
  measurements UserMeasurement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("measurement_types")
}

// User measurements and performance tracking
model UserMeasurement {
  id                String @id @default(cuid())
  userId            String
  measurementTypeId String

  // Measurement data
  value     Float
  unit      String?
  notes     String?
  sessionId String? // Reference to workout session if applicable

  // BRX specific fields
  isPersonalBest Boolean @default(false)

  // Relationships
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  measurementType MeasurementType @relation(fields: [measurementTypeId], references: [id], onDelete: Cascade)

  // Timestamps
  recordedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("user_measurements")
}

// BRX Platform configuration (stores the massive platform JSON)
model PlatformConfig {
  id            String @id @default(cuid())
  brxPlatformId Int    @unique // Original BRX platform ID (111)

  // Core platform info
  brand       String
  subdomain   String
  host        String
  trainerName String

  // Configuration JSON fields (store complex platform settings)
  platformTabs    Json // Navigation structure
  customAppMenu   Json // Mobile app menu configuration
  businessMetrics Json // Business dashboard metrics
  paymentOptions  Json // Payment and subscription options
  theme           Json // Color scheme and branding
  featureFlags    String[] // Enabled features

  // Platform settings
  enableFbm         Boolean  @default(false)
  useStripeExpress  Boolean?
  hideClientLanding Boolean  @default(false)
  freeSignups       Boolean  @default(true)

  // Contact and business info
  contactPhone     String?
  mailingAddress   String?
  hoursOfOperation String?
  supportEmail     String?

  // Links and integrations
  iosDownloadLink     String?
  androidDownloadLink String?
  logoUrl             String?
  iconUrl             String?

  // API endpoints configuration
  apiLinks Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("platform_configs")
}

// Client tags from BRX platform (extensive tagging system)
model Tag {
  id       String      @id @default(cuid())
  name     String      @unique
  category TagCategory
  color    String?

  // BRX specific
  isDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

// Services from BRX FBM (Fitness Business Management)
model Service {
  id           String  @id @default(cuid())
  brxServiceId Int? // Original BRX service ID
  name         String
  description  String?
  duration     Int? // Duration in minutes
  price        Float?

  // Service configuration
  isActive  Boolean @default(true)
  isPrivate Boolean @default(false)

  // Booking settings
  requireTrainer Boolean @default(false)
  maxBookingDays Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

// Enhanced FBM Service model for business operations
model FbmService {
  id           String @id @default(cuid())
  brxServiceId Int?   @unique // Original BRX service ID for migration

  // Core service information
  name        String
  description String?
  category    ServiceCategory @default(PERSONAL_TRAINING)

  // Pricing and duration
  price       Float? // Base price
  duration    Int? // Duration in minutes
  maxCapacity Int    @default(1) // Max clients per session

  // Business settings
  isActive        Boolean @default(true)
  isPrivate       Boolean @default(false)
  requiresPayment Boolean @default(true)

  // Booking configuration
  requireTrainer     Boolean @default(true)
  maxAdvanceBooking  Int? // Days in advance
  minAdvanceBooking  Int? // Minimum hours in advance
  cancellationPolicy String? // Cancellation terms

  // Service availability
  availableDays      String[] // ["monday", "tuesday", ...]
  availableTimeSlots Json? // Time slot configuration

  // Relationships
  locations    FbmServiceLocation[]
  appointments FbmAppointment[]
  packages     FbmPackageService[]
  visits       FbmVisit[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fbm_services")
}

// FBM Business Locations
model FbmLocation {
  id            String @id @default(cuid())
  brxLocationId Int?   @unique // Original BRX location ID

  // Location details
  name    String
  address String?
  city    String?
  state   String?
  zipCode String?
  country String  @default("US")

  // Contact information
  phone   String?
  email   String?
  website String?

  // Location settings
  isActive       Boolean @default(true)
  isMainLocation Boolean @default(false)
  timezone       String  @default("America/New_York")

  // Business hours (JSON format for flexibility)
  businessHours Json? // {"monday": {"open": "09:00", "close": "17:00"}, ...}

  // Relationships
  services     FbmServiceLocation[]
  appointments FbmAppointment[]
  visits       FbmVisit[]
  schedules    FbmSchedule[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fbm_locations")
}

// Many-to-many relationship between FbmService and FbmLocation
model FbmServiceLocation {
  id         String @id @default(cuid())
  serviceId  String
  locationId String

  // Location-specific service settings
  isActive    Boolean @default(true)
  customPrice Float? // Override service price for this location

  // Relationships
  service  FbmService  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  location FbmLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([serviceId, locationId])
  @@map("fbm_service_locations")
}

// FBM Appointment Booking System
model FbmAppointment {
  id               String @id @default(cuid())
  brxAppointmentId Int?   @unique // Original BRX appointment ID

  // Core appointment details
  serviceId  String
  locationId String
  trainerId  String // User ID of the trainer
  clientId   String? // User ID of the client (can be null for open slots)

  // Scheduling
  scheduledAt DateTime
  endTime     DateTime
  duration    Int // Duration in minutes

  // Appointment status and metadata
  status        AppointmentStatus @default(SCHEDULED)
  notes         String?
  internalNotes String? // Staff-only notes

  // Pricing and payment
  price         Float?
  isPaid        Boolean       @default(false)
  paymentStatus PaymentStatus @default(PENDING)

  // Booking restrictions
  maxCapacity     Int @default(1)
  currentBookings Int @default(0)

  // Cancellation and changes
  cancellationReason String?
  cancelledAt        DateTime?
  rescheduledFromId  String? // If rescheduled, reference to original appointment

  // Relationships
  service  FbmService  @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  location FbmLocation @relation(fields: [locationId], references: [id], onDelete: Restrict)
  trainer  User        @relation("TrainerAppointments", fields: [trainerId], references: [id], onDelete: Restrict)
  client   User?       @relation("ClientAppointments", fields: [clientId], references: [id], onDelete: SetNull)
  visits   FbmVisit[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fbm_appointments")
}

// FBM Visit Tracking (for billing and attendance)
model FbmVisit {
  id         String @id @default(cuid())
  brxVisitId Int?   @unique // Original BRX visit ID

  // Visit details
  appointmentId String
  serviceId     String
  locationId    String
  clientId      String
  trainerId     String?

  // Visit status and timing
  status         VisitStatus @default(REGISTERED)
  checkedInAt    DateTime?
  checkedOutAt   DateTime?
  actualDuration Int? // Actual duration in minutes

  // Visit metadata
  notes    String?
  rating   Int? // 1-5 star rating
  feedback String?

  // Billing and payment
  price          Float?
  isPaid         Boolean @default(false)
  packageVisitId String? // If part of a package

  // Relationships
  appointment  FbmAppointment   @relation(fields: [appointmentId], references: [id], onDelete: Restrict)
  service      FbmService       @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  location     FbmLocation      @relation(fields: [locationId], references: [id], onDelete: Restrict)
  client       User             @relation("ClientVisits", fields: [clientId], references: [id], onDelete: Restrict)
  trainer      User?            @relation("TrainerVisits", fields: [trainerId], references: [id], onDelete: SetNull)
  packageVisit FbmPackageVisit?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fbm_visits")
}

// FBM Service Packages and Memberships
model FbmPackage {
  id           String @id @default(cuid())
  brxPackageId Int?   @unique // Original BRX package ID

  // Package details
  name        String
  description String?
  packageType PackageType @default(SESSION_PACKAGE)

  // Pricing and validity
  price        Float
  visitCount   Int? // Number of visits included (null for unlimited)
  validityDays Int? // Package expiration in days (null for no expiration)

  // Package settings
  isActive        Boolean @default(true)
  isRecurring     Boolean @default(false) // For membership packages
  recurringPeriod Int? // Days between recurring charges

  // Usage restrictions
  maxUsagePerDay  Int? // Max visits per day
  maxUsagePerWeek Int? // Max visits per week
  transferable    Boolean @default(false) // Can be transferred to another client

  // Relationships
  services  FbmPackageService[]
  purchases FbmPackagePurchase[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fbm_packages")
}

// Many-to-many relationship between FbmPackage and FbmService
model FbmPackageService {
  id        String @id @default(cuid())
  packageId String
  serviceId String

  // Service-specific package settings
  visitAllowance  Int? // How many visits of this service are included
  discountPercent Float? // Discount for this service in the package

  // Relationships
  package FbmPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  service FbmService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([packageId, serviceId])
  @@map("fbm_package_services")
}

// Track package purchases by clients
model FbmPackagePurchase {
  id        String @id @default(cuid())
  packageId String
  clientId  String

  // Purchase details
  purchasePrice   Float
  visitCount      Int? // Visits included in this purchase
  remainingVisits Int? // Visits remaining

  // Validity
  purchasedAt DateTime  @default(now())
  expiresAt   DateTime?
  isActive    Boolean   @default(true)

  // Payment tracking
  isPaid        Boolean       @default(false)
  paymentStatus PaymentStatus @default(PENDING)

  // Relationships
  package FbmPackage        @relation(fields: [packageId], references: [id], onDelete: Restrict)
  client  User              @relation("ClientPackages", fields: [clientId], references: [id], onDelete: Restrict)
  visits  FbmPackageVisit[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fbm_package_purchases")
}

// Track individual visits used from packages
model FbmPackageVisit {
  id         String @id @default(cuid())
  purchaseId String
  visitId    String @unique

  // Visit usage
  usedAt DateTime @default(now())

  // Relationships
  purchase FbmPackagePurchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  visit    FbmVisit           @relation(fields: [visitId], references: [id], onDelete: Cascade)

  @@map("fbm_package_visits")
}

// Payment Options and Stripe Integration
model PaymentOption {
  id           String @id @default(cuid())
  brxPaymentId Int?   @unique // Original BRX payment option ID

  // Payment method details
  name     String // "Credit Card", "PayPal", "Cash", etc.
  type     PaymentType
  isActive Boolean     @default(true)

  // Stripe integration
  stripeAccountId  String? // Stripe Connect account ID
  stripeFeePercent Float? // Platform fee percentage

  // Payment settings
  requiresApproval Boolean @default(false)
  allowRefunds     Boolean @default(true)

  // Configuration
  settings Json? // Payment-specific configuration

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payment_options")
}

// FBM Trainer/Location Scheduling
model FbmSchedule {
  id            String @id @default(cuid())
  brxScheduleId Int?   @unique // Original BRX schedule ID

  // Schedule details
  trainerId  String
  locationId String

  // Time configuration
  dayOfWeek Int // 0 = Sunday, 1 = Monday, etc.
  startTime String // "09:00" format
  endTime   String // "17:00" format

  // Schedule metadata
  isActive       Boolean   @default(true)
  effectiveFrom  DateTime
  effectiveUntil DateTime?

  // Break and availability
  breakStartTime  String? // "12:00" format
  breakEndTime    String? // "13:00" format
  maxAppointments Int? // Max appointments in this time slot

  // Relationships
  trainer  User        @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  location FbmLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([trainerId, locationId, dayOfWeek, startTime])
  @@map("fbm_schedules")
}

// Enums for BRX platform
enum TagCategory {
  CLIENT
  EXERCISE
  VIDEO
  SERVICE
  PACKAGE
  PRODUCT
  USER
  TRAINER
}

enum MeasurementCategory {
  SPEED
  POWER
  STRENGTH
  ENDURANCE
  FLEXIBILITY
  BODY_COMPOSITION
  RECOVERY
  NUTRITION
  THROWING
  HITTING
  CUSTOM
}

// FBM Business Enums
enum ServiceCategory {
  PERSONAL_TRAINING
  GROUP_FITNESS
  SPORTS_TRAINING
  NUTRITION_COACHING
  RECOVERY_THERAPY
  ASSESSMENT
  CONSULTATION
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum VisitStatus {
  REGISTERED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  LATE_CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PackageType {
  SESSION_PACKAGE
  MEMBERSHIP
  UNLIMITED
  TRIAL
  PROMOTIONAL
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  CASH
  CHECK
  BANK_TRANSFER
  CRYPTOCURRENCY
}

// REPORTING & ANALYTICS TABLES
// Designed for data export to Google Cloud, HubSpot, and BI tools

// Daily revenue aggregation for easy export to financial systems
model RevenueReport {
  id          String @id @default(cuid())
  
  // Time period
  reportDate  DateTime @unique // Daily aggregation
  periodType  ReportPeriod @default(DAILY)
  
  // Location and service breakdown
  locationId  String?
  serviceId   String?
  
  // Core revenue metrics
  totalRevenue        Float @default(0)
  packageRevenue      Float @default(0)
  directPayRevenue    Float @default(0)
  totalVisits         Int   @default(0)
  paidVisits          Int   @default(0)
  packageVisits       Int   @default(0)
  
  // Performance metrics
  averageSessionPrice Float @default(0)
  conversionRate      Float @default(0) // Appointments to completed visits
  noShowRate          Float @default(0)
  
  // Growth indicators
  newClients          Int   @default(0)
  returningClients    Int   @default(0)
  
  // Relationships for drill-down analysis
  location    FbmLocation? @relation(fields: [locationId], references: [id])
  service     FbmService?  @relation(fields: [serviceId], references: [id])
  
  // Export tracking
  exportedToGCP       Boolean   @default(false)
  exportedToHubSpot   Boolean   @default(false)
  lastExportedAt      DateTime?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([reportDate, locationId, serviceId])
  @@map("revenue_reports")
}

// Detailed visit analytics for business intelligence
model VisitReport {
  id          String @id @default(cuid())
  visitId     String @unique // References FbmVisit
  
  // Visit details (denormalized for fast export)
  visitDate           DateTime
  clientId            String
  clientName          String
  clientEmail         String
  trainerId           String?
  trainerName         String?
  serviceId           String
  serviceName         String
  locationId          String
  locationName        String
  
  // Session metrics
  scheduledDuration   Int?    // Minutes
  actualDuration      Int?    // Minutes
  sessionPrice        Float?
  paymentMethod       String?
  isPaid              Boolean @default(false)
  
  // Package information
  isPackageVisit      Boolean @default(false)
  packageId           String?
  packageName         String?
  remainingVisits     Int?
  
  // Quality metrics
  clientRating        Int?    // 1-5 stars
  trainerNotes        String?
  clientFeedback      String?
  
  // Business intelligence fields
  isNewClient         Boolean @default(false)
  clientLifetimeValue Float   @default(0)
  sessionProfitMargin Float?
  
  // Status tracking
  visitStatus         VisitStatus
  appointmentStatus   AppointmentStatus
  
  // Export metadata
  exportedToGCP       Boolean   @default(false)
  exportedToHubSpot   Boolean   @default(false)
  gccObjectId         String?   // Google Cloud Console ID
  hubspotDealId       String?   // HubSpot deal/activity ID
  
  // Relationships
  visit       FbmVisit @relation(fields: [visitId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("visit_reports")
}

// Client analytics and lifetime value tracking
model ClientAnalytics {
  id              String @id @default(cuid())
  clientId        String @unique
  
  // Client information (denormalized for export)
  clientName      String
  clientEmail     String
  phoneNumber     String?
  signupDate      DateTime
  
  // Engagement metrics
  totalVisits             Int     @default(0)
  completedVisits         Int     @default(0)
  cancelledVisits         Int     @default(0)
  noShowVisits            Int     @default(0)
  
  // Financial metrics
  lifetimeValue           Float   @default(0)
  totalSpent              Float   @default(0)
  averageSessionPrice     Float   @default(0)
  outstandingBalance      Float   @default(0)
  
  // Package metrics
  packagesOwned           Int     @default(0)
  activePackages          Int     @default(0)
  totalPackageValue       Float   @default(0)
  packageUtilizationRate  Float   @default(0) // % of purchased visits used
  
  // Engagement patterns
  lastVisitDate           DateTime?
  averageVisitsPerMonth   Float   @default(0)
  preferredServices       String[] // Top service IDs
  preferredTrainers       String[] // Top trainer IDs
  preferredLocations      String[] // Top location IDs
  preferredTimeSlots      String[] // e.g., ["morning", "evening"]
  
  // Churn prediction metrics
  daysSinceLastVisit      Int?
  churnRisk              ChurnRisk @default(LOW)
  engagementScore        Float     @default(0) // 0-100
  
  // Satisfaction metrics
  averageRating          Float?   // Average of all session ratings
  npsScore               Int?     // Net Promoter Score (-100 to 100)
  lastFeedbackDate       DateTime?
  
  // Business intelligence tags
  clientSegment          ClientSegment @default(REGULAR)
  acquisitionChannel     String?       // How they found the business
  referralSource         String?       // Who referred them
  
  // CRM integration
  hubspotContactId       String?
  googleCrmId            String?
  salesforceContactId    String?
  
  // Export tracking
  exportedToHubSpot      Boolean   @default(false)
  exportedToGCP          Boolean   @default(false)
  lastSyncedAt           DateTime?
  
  // Relationships
  client      User @relation("ClientAnalytics", fields: [clientId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("client_analytics")
}

// Service performance metrics for business optimization
model ServicePerformance {
  id                String @id @default(cuid())
  serviceId         String
  reportPeriod      DateTime // Monthly aggregation
  
  // Service details (denormalized)
  serviceName       String
  serviceCategory   ServiceCategory
  basePrice         Float?
  
  // Volume metrics
  totalBookings     Int   @default(0)
  completedSessions Int   @default(0)
  cancelledSessions Int   @default(0)
  noShowSessions    Int   @default(0)
  
  // Revenue metrics
  totalRevenue      Float @default(0)
  packageRevenue    Float @default(0)
  directRevenue     Float @default(0)
  averagePrice      Float @default(0)
  
  // Efficiency metrics
  utilizationRate   Float @default(0) // % of available slots booked
  completionRate    Float @default(0) // % of bookings completed
  clientRetention   Float @default(0) // % of clients who rebook
  
  // Quality metrics
  averageRating     Float?
  clientSatisfaction Float @default(0)
  trainerEfficiency Float @default(0) // Sessions per trainer hour
  
  // Profitability analysis
  operatingCost     Float @default(0) // Trainer cost + overhead
  grossProfit       Float @default(0)
  profitMargin      Float @default(0)
  roi               Float @default(0)
  
  // Demand patterns
  peakHours         String[] // Most popular time slots
  seasonalTrends    Json?    // Monthly demand patterns
  waitlistDemand    Int      @default(0)
  
  // Competition analysis
  marketPrice       Float?   // Average market price for similar services
  pricePositioning  String?  // "premium", "competitive", "budget"
  
  // Export metadata
  exportedToGCP     Boolean   @default(false)
  exportedToBI      Boolean   @default(false)
  
  // Relationships
  service   FbmService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([serviceId, reportPeriod])
  @@map("service_performance")
}

// Location-based business metrics
model LocationMetrics {
  id                String @id @default(cuid())
  locationId        String
  reportPeriod      DateTime // Monthly aggregation
  
  // Location details (denormalized)
  locationName      String
  city              String?
  state             String?
  
  // Operational metrics
  totalAppointments Int   @default(0)
  completedVisits   Int   @default(0)
  utilizedHours     Float @default(0) // Hours with appointments
  availableHours    Float @default(0) // Total business hours
  utilizationRate   Float @default(0) // % of hours utilized
  
  // Revenue metrics
  totalRevenue      Float @default(0)
  revenuePerHour    Float @default(0)
  revenuePerSqFt    Float? // If square footage is tracked
  
  // Staff metrics
  activeTrainers    Int   @default(0)
  trainerHours      Float @default(0)
  averageTrainerUtilization Float @default(0)
  
  // Client metrics
  uniqueClients     Int   @default(0)
  newClients        Int   @default(0)
  clientRetention   Float @default(0)
  
  // Service breakdown
  topServices       String[] // Most popular service IDs
  serviceRevenue    Json?    // Revenue by service type
  
  // Operational costs
  staffCosts        Float @default(0)
  utilityCosts      Float @default(0)
  maintenanceCosts  Float @default(0)
  totalOperatingCosts Float @default(0)
  
  // Profitability
  grossProfit       Float @default(0)
  netProfit         Float @default(0)
  profitMargin      Float @default(0)
  
  // Capacity planning
  peakCapacity      Float @default(0) // Max simultaneous clients
  averageCapacity   Float @default(0)
  growthPotential   Float @default(0) // Estimated revenue increase at full capacity
  
  // Export integration
  exportedToGCP     Boolean   @default(false)
  gccDatasetId      String?   // Google Cloud dataset ID
  
  // Relationships
  location  FbmLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([locationId, reportPeriod])
  @@map("location_metrics")
}

// Trainer performance and productivity analytics
model TrainerAnalytics {
  id              String @id @default(cuid())
  trainerId       String
  reportPeriod    DateTime // Monthly aggregation
  
  // Trainer details (denormalized)
  trainerName     String
  trainerEmail    String
  hireDate        DateTime?
  
  // Productivity metrics
  scheduledHours      Float @default(0)
  workedHours         Float @default(0)
  billableHours       Float @default(0)
  utilizationRate     Float @default(0) // Billable / Scheduled
  
  // Session metrics
  totalSessions       Int   @default(0)
  completedSessions   Int   @default(0)
  cancelledSessions   Int   @default(0)
  noShowSessions      Int   @default(0)
  completionRate      Float @default(0)
  
  // Revenue generation
  totalRevenue        Float @default(0)
  revenuePerHour      Float @default(0)
  averageSessionPrice Float @default(0)
  
  // Client relationships
  activeClients       Int   @default(0)
  newClientsAcquired  Int   @default(0)
  clientRetentionRate Float @default(0)
  
  // Quality metrics
  averageClientRating Float?
  clientSatisfactionScore Float @default(0)
  sessionRatingDistribution Json? // Rating breakdown
  
  // Professional development
  certifications      String[] // List of current certifications
  trainingHours       Float @default(0) // Continuing education
  skillsAssessed      Json?    // Skills and proficiency levels
  
  // Performance rankings
  revenueRank         Int?   // Rank among all trainers
  clientSatisfactionRank Int?
  utilizationRank     Int?
  
  // Goals and targets
  monthlyRevenueTarget Float?
  clientTarget        Int?
  hoursTarget         Float?
  targetAchievementRate Float @default(0)
  
  // Export tracking
  exportedToHR        Boolean   @default(false)
  exportedToPayroll   Boolean   @default(false)
  
  // Relationships
  trainer   User @relation("TrainerAnalytics", fields: [trainerId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([trainerId, reportPeriod])
  @@map("trainer_analytics")
}

// Package performance and profitability analysis
model PackageAnalytics {
  id                String @id @default(cuid())
  packageId         String
  reportPeriod      DateTime // Monthly aggregation
  
  // Package details (denormalized)
  packageName       String
  packageType       PackageType
  price             Float
  visitCount        Int?
  validityDays      Int?
  
  // Sales metrics
  packagesSold      Int   @default(0)
  totalRevenue      Float @default(0)
  averageSalePrice  Float @default(0)
  
  // Usage metrics
  totalVisitsUsed   Int   @default(0)
  averageUsageRate  Float @default(0) // % of visits actually used
  averageDaysToExpiry Int @default(0)
  
  // Client behavior
  newClientSales    Int   @default(0) // Packages sold to new clients
  existingClientSales Int @default(0) // Packages sold to existing clients
  renewalRate       Float @default(0) // % who buy another package
  
  // Profitability
  directCosts       Float @default(0) // Cost of delivering services
  grossProfit       Float @default(0)
  profitMargin      Float @default(0)
  
  // Market performance
  conversionRate    Float @default(0) // % of package views that result in sales
  priceElasticity   Float? // How sales respond to price changes
  competitorComparison Json? // Comparison with similar market packages
  
  // Utilization patterns
  peakUsageHours    String[] // When package visits are most commonly used
  serviceDistribution Json?  // Which services are used most with this package
  
  // Export metadata
  exportedToFinance Boolean   @default(false)
  exportedToMarketing Boolean @default(false)
  
  // Relationships
  package   FbmPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([packageId, reportPeriod])
  @@map("package_analytics")
}

// Data export log for tracking what's been synced to external systems
model DataExportLog {
  id              String @id @default(cuid())
  
  // Export details
  exportType      ExportType
  tableName       String    // Which table was exported
  recordId        String?   // Specific record ID (optional)
  
  // Destination system
  destinationSystem String  // "google-cloud", "hubspot", "salesforce", etc.
  destinationId   String?   // External system record ID
  
  // Export metadata
  recordsExported Int       @default(0)
  exportStatus    ExportStatus @default(PENDING)
  errorMessage    String?
  
  // Timing
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  
  // File information (for batch exports)
  fileName        String?
  fileSize        Int?      // Bytes
  fileFormat      String?   // "json", "csv", "parquet"
  bucketPath      String?   // Cloud storage path
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("data_export_logs")
}


// New enums for reporting
enum ReportPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ChurnRisk {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ClientSegment {
  NEW
  REGULAR
  VIP
  CHAMPION
  AT_RISK
  CHURNED
}

enum ExportType {
  FULL_SYNC
  INCREMENTAL
  SINGLE_RECORD
  BULK_EXPORT
}

enum ExportStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}
