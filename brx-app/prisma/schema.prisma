// Enhanced Prisma Schema for BRX Performance App
// Generated from: UI Forms, API Schemas, and Business Logic Analysis
// Sources: Scraped forms (SignIn/SignUp), tRPC routers, existing models
// Last updated: 2025-05-29

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User model - merged from forms and API schemas + BRX API data
model User {
  id        String   @id @default(cuid())
  email     String   @unique  // From SignIn/SignUp forms and API
  name      String?             // From SignUp form and API
  password  String              // From authentication forms
  
  // Authentication preferences
  rememberMe Boolean @default(false) // From SignIn form
  
  // BRX Platform specific fields
  brxUserId     Int?      // Original BRX user ID for data migration
  firstName     String?
  lastName      String?
  nickname      String?
  phoneNumber   String?
  timeZone      String?
  website       String?
  trainerBio    String?
  aboutMe       String?
  profileImage  String?
  
  // BRX Platform metrics
  totalCalories      Int @default(0)
  currentFrcScore    Int @default(0)
  numWorkouts        Int @default(0)
  numBadges          Int @default(0)
  level              Int @default(1)
  points             Int @default(0)
  levelCompletion    Float @default(0)
  pointsUntilNext    Int @default(0)
  
  // User preferences and settings
  hideMobileAppBanner Boolean @default(false)
  showActivity        Boolean @default(true)
  trainerMessagingDisabled Boolean @default(false)
  
  // User type and roles
  roles             String[] // ["trainer", "user", "business"]
  tags              String[]
  
  // Relationships
  workouts       Workout[]
  exercises      UserExercise[]
  sessions       UserSession[]
  programs       Program[]
  messages       Message[]
  measurements   UserMeasurement[]
  favoriteExercises Int[]  // Exercise IDs
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Enhanced Exercise model with BRX Performance specifics
model Exercise {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String?  // e.g., "Strength", "Cardio", "Flexibility"
  difficulty  String?  // e.g., "Beginner", "Intermediate", "Advanced"
  
  // BRX Performance specific fields
  muscleGroups String[] // Array of targeted muscle groups
  equipment    String?  // Required equipment
  instructions String?  // Step-by-step instructions
  
  // Media and resources
  imageUrl     String?
  videoUrl     String?
  
  // Relationships
  userExercises UserExercise[]
  workoutExercises WorkoutExercise[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("exercises")
}

// User's personalized exercise data
model UserExercise {
  id       String @id @default(cuid())
  userId   String
  exerciseId String
  
  // Personal records and preferences
  personalBest Json?   // Store PR data as JSON
  preferences  Json?   // User's exercise preferences
  notes        String?
  
  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, exerciseId])
  @@map("user_exercises")
}

// Workout sessions
model Workout {
  id          String   @id @default(cuid())
  userId      String
  programId   String?  // Optional: workouts can be part of a program
  name        String
  description String?
  
  // Workout metadata
  duration    Int?     // Duration in minutes
  status      WorkoutStatus @default(PLANNED)
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  program     Program? @relation(fields: [programId], references: [id], onDelete: SetNull)
  exercises   WorkoutExercise[]
  
  // Timestamps
  scheduledAt DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("workouts")
}

// Many-to-many relationship between Workouts and Exercises
model WorkoutExercise {
  id         String @id @default(cuid())
  workoutId  String
  exerciseId String
  
  // Exercise session data
  sets       Int?
  reps       Int?
  weight     Float?
  duration   Int?   // Duration in seconds for time-based exercises
  rest       Int?   // Rest time in seconds
  
  // Session notes and completion
  notes      String?
  completed  Boolean @default(false)
  
  // Relationships
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([workoutId, exerciseId])
  @@map("workout_exercises")
}

// Authentication and session management
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  
  // Session metadata
  userAgent String?
  ipAddress String?
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_sessions")
}

// Program model for structured workout programs
model Program {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  
  // Program metadata
  duration    Int?     // Duration in weeks
  difficulty  String?  // e.g., "Beginner", "Intermediate", "Advanced"
  goals       String[] // e.g., ["Strength", "Weight Loss", "Muscle Gain"]
  
  // Program scheduling
  status      ProgramStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  
  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts    Workout[]
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("programs")
}

// Message model for coach-client communication
model Message {
  id        String      @id @default(cuid())
  userId    String
  content   String
  type      MessageType @default(TEXT)
  
  // Message metadata
  isRead    Boolean     @default(false)
  priority  MessagePriority @default(NORMAL)
  
  // Optional references
  workoutId String?
  programId String?
  
  // Relationships
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  sentAt    DateTime    @default(now())
  readAt    DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("messages")
}

// Enums
enum WorkoutStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProgramStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum MessageType {
  TEXT
  WORKOUT_REMINDER
  PROGRAM_UPDATE
  ACHIEVEMENT
  SYSTEM
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// BRX Platform-specific models

// Measurement types from BRX platform (100+ metrics)
model MeasurementType {
  id           String @id @default(cuid())
  name         String @unique // e.g., "20-yd Dash", "Vertical Jump"
  category     String // e.g., "Speed", "Power", "Strength"
  unit         String? // e.g., "seconds", "inches", "mph"
  description  String?
  
  // BRX specific fields
  brxStatKey   String? // Original BRX stat key
  hidden       Boolean @default(false)
  isDefault    Boolean @default(false)
  
  // Relationships
  measurements UserMeasurement[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("measurement_types")
}

// User measurements and performance tracking
model UserMeasurement {
  id              String @id @default(cuid())
  userId          String
  measurementTypeId String
  
  // Measurement data
  value           Float
  unit            String?
  notes           String?
  sessionId       String? // Reference to workout session if applicable
  
  // BRX specific fields
  isPersonalBest  Boolean @default(false)
  
  // Relationships
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  measurementType MeasurementType @relation(fields: [measurementTypeId], references: [id], onDelete: Cascade)
  
  // Timestamps
  recordedAt      DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("user_measurements")
}

// BRX Platform configuration (stores the massive platform JSON)
model PlatformConfig {
  id                String @id @default(cuid())
  brxPlatformId     Int    @unique // Original BRX platform ID (111)
  
  // Core platform info
  brand             String
  subdomain         String
  host              String
  trainerName       String
  
  // Configuration JSON fields (store complex platform settings)
  platformTabs      Json   // Navigation structure
  customAppMenu     Json   // Mobile app menu configuration
  businessMetrics   Json   // Business dashboard metrics
  paymentOptions    Json   // Payment and subscription options
  theme             Json   // Color scheme and branding
  featureFlags      String[] // Enabled features
  
  // Platform settings
  enableFbm         Boolean @default(false)
  useStripeExpress  Boolean?
  hideClientLanding Boolean @default(false)
  freeSignups       Boolean @default(true)
  
  // Contact and business info
  contactPhone      String?
  mailingAddress    String?
  hoursOfOperation  String?
  supportEmail      String?
  
  // Links and integrations
  iosDownloadLink     String?
  androidDownloadLink String?
  logoUrl             String?
  iconUrl             String?
  
  // API endpoints configuration
  apiLinks          Json
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("platform_configs")
}

// Client tags from BRX platform (extensive tagging system)
model Tag {
  id        String @id @default(cuid())
  name      String @unique
  category  TagCategory
  color     String?
  
  // BRX specific
  isDefault Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

// Services from BRX FBM (Fitness Business Management)
model Service {
  id          String @id @default(cuid())
  brxServiceId Int?   // Original BRX service ID
  name        String
  description String?
  duration    Int?    // Duration in minutes
  price       Float?
  
  // Service configuration
  isActive    Boolean @default(true)
  isPrivate   Boolean @default(false)
  
  // Booking settings
  requireTrainer Boolean @default(false)
  maxBookingDays Int?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("services")
}

// Enums for BRX platform
enum TagCategory {
  CLIENT
  EXERCISE
  VIDEO
  SERVICE
  PACKAGE
  PRODUCT
  USER
  TRAINER
}

enum MeasurementCategory {
  SPEED
  POWER
  STRENGTH
  ENDURANCE
  FLEXIBILITY
  BODY_COMPOSITION
  RECOVERY
  NUTRITION
  THROWING
  HITTING
  CUSTOM
}
