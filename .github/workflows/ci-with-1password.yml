name: CI/CD with 1Password Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

jobs:
  # Setup and validate 1Password integration
  setup-1password:
    runs-on: ubuntu-latest
    outputs:
      op-session: ${{ steps.op-signin.outputs.session }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1
        with:
          version: 'latest'
          
      - name: Configure 1Password Service Account
        id: op-signin
        run: |
          echo "Setting up 1Password service account authentication"
          export OP_SERVICE_ACCOUNT_TOKEN="${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}"
          op --version
          echo "session=authenticated" >> $GITHUB_OUTPUT

  # Development environment tests
  test-development:
    needs: setup-1password
    runs-on: ubuntu-latest
    env:
      NODE_ENV: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'brx-app/package-lock.json'
          
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1
        
      - name: Setup 1Password environment
        working-directory: ./brx-app
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          # Create development environment file with 1Password references
          cat > .env.local << 'EOF'
          # CI/CD Environment - 1Password Integration
          DATABASE_URL="op://Development Credentials/BRX Database/connection_string"
          REDIS_URL="op://Development Credentials/Redis Connection/url"
          SUPABASE_URL="op://Development Credentials/Supabase/url"
          SUPABASE_ANON_KEY="op://Development Credentials/Supabase/anon_key"
          SUPABASE_SERVICE_ROLE_KEY="op://Development Credentials/Supabase/service_role_key"
          OPENAI_API_KEY="op://Development Credentials/OPENAI_API_KEY/credential"
          ANTHROPIC_API_KEY="op://Development Credentials/Anthropic API/api_key"
          PINECONE_API_KEY="op://Development Credentials/Pinecone/api_key"
          PINECONE_ENVIRONMENT="op://Development Credentials/Pinecone/environment"
          FIRECRAWL_API_KEY="op://Development Credentials/FIRECRAWL_API_KEY/credential"
          BRX_API_TOKEN="op://Development Credentials/BRX API Credentials/API_TOKEN"
          BRX_BEARER_TOKEN="op://Development Credentials/BRX API Credentials/BEARER_TOKEN"
          NEXTAUTH_SECRET="op://Development Credentials/NextAuth/secret"
          NEXTAUTH_URL="op://Development Credentials/NextAuth/url"
          JWT_SECRET="op://Development Credentials/JWT Secrets/secret"
          NODE_ENV=test
          CI=true
          EOF
          
      - name: Install dependencies
        working-directory: ./brx-app
        run: npm ci
        
      - name: Generate Prisma client
        working-directory: ./brx-app
        run: npm run db:generate
        
      - name: Run lint checks
        working-directory: ./brx-app
        run: npm run lint
        
      - name: Build application
        working-directory: ./brx-app
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: op run --env-file=.env.local -- npm run build:unsafe
        
      - name: Run unit tests (if configured)
        working-directory: ./brx-app
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            op run --env-file=.env.local -- npm test
          else
            echo "No unit tests configured, skipping..."
          fi

  # E2E Tests with 1Password
  test-e2e:
    needs: setup-1password
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'brx-app/package-lock.json'
          
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1
        
      - name: Install dependencies
        working-directory: ./brx-app
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: ./brx-app
        run: npx playwright install --with-deps
        
      - name: Setup test environment
        working-directory: ./brx-app
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          # Create test environment file
          cat > .env.local << 'EOF'
          # E2E Test Environment
          DATABASE_URL="op://Development Credentials/BRX Database/connection_string"
          SUPABASE_URL="op://Development Credentials/Supabase/url"
          SUPABASE_ANON_KEY="op://Development Credentials/Supabase/anon_key"
          NEXTAUTH_SECRET="op://Development Credentials/NextAuth/secret"
          NEXTAUTH_URL="http://localhost:3000"
          NODE_ENV=test
          CI=true
          EOF
          
      - name: Start application for E2E tests
        working-directory: ./brx-app
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: |
          # Start the app in background for E2E testing
          op run --env-file=.env.local -- npm run build:unsafe
          op run --env-file=.env.local -- npm run start:unsafe &
          sleep 30  # Wait for app to start
          
      - name: Run E2E tests
        working-directory: ./brx-app
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        run: op run --env-file=.env.local -- npx playwright test
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: brx-app/test-results/
          retention-days: 7

  # Security audit
  security-audit:
    needs: setup-1password
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'brx-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./brx-app
        run: npm ci
        
      - name: Run security audit
        working-directory: ./brx-app
        run: npm audit --audit-level high
        
      - name: Check for hardcoded secrets
        run: |
          echo "Scanning for potential hardcoded secrets..."
          # Check for common secret patterns (excluding 1Password references)
          if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]*['\"]" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" | grep -v "op://"; then
            echo "⚠️ Potential hardcoded secrets found!"
            exit 1
          else
            echo "✅ No hardcoded secrets detected"
          fi
          
      - name: Validate 1Password references
        run: |
          echo "Validating 1Password secret references..."
          # Check that all environment files use proper 1Password references
          find . -name ".env*" -not -path "./node_modules/*" -exec grep -H "=" {} \; | while read line; do
            if echo "$line" | grep -v "op://" | grep -E "(password|secret|key|token).*=" | grep -v "NODE_ENV\|CI\|NEXT_TELEMETRY"; then
              echo "⚠️ Non-1Password secret reference found: $line"
              exit 1
            fi
          done
          echo "✅ All secret references use 1Password format"

  # Deployment to staging (with 1Password)
  deploy-staging:
    needs: [test-development, test-e2e, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1
        
      - name: Deploy to Vercel (Staging)
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          cd brx-app
          # Use 1Password to inject staging credentials for deployment
          cat > .env.local << 'EOF'
          DATABASE_URL="op://Staging Credentials/Staging Database/connection_string"
          SUPABASE_URL="op://Staging Credentials/Staging Supabase/url"
          SUPABASE_SERVICE_ROLE_KEY="op://Staging Credentials/Staging Supabase/service_role_key"
          NEXTAUTH_SECRET="op://Staging Credentials/NextAuth/secret"
          NEXTAUTH_URL="https://brx-staging.vercel.app"
          NODE_ENV=staging
          EOF
          
          # Install Vercel CLI and deploy
          npm install -g vercel
          op run --env-file=.env.local -- vercel --token="${{ secrets.VERCEL_TOKEN }}" --yes

  # Production deployment (manual approval required)
  deploy-production:
    needs: [test-development, test-e2e, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1
        
      - name: Deploy to Production
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          cd brx-app
          # Use 1Password to inject production credentials
          cat > .env.local << 'EOF'
          DATABASE_URL="op://Production Credentials/Production Database/connection_string"
          SUPABASE_URL="op://Production Credentials/Production Supabase/url"
          SUPABASE_SERVICE_ROLE_KEY="op://Production Credentials/Production Supabase/service_role_key"
          NEXTAUTH_SECRET="op://Production Credentials/NextAuth/secret"
          NEXTAUTH_URL="https://brx-platform.com"
          NODE_ENV=production
          EOF
          
          # Install Vercel CLI and deploy to production
          npm install -g vercel
          op run --env-file=.env.local -- vercel --prod --token="${{ secrets.VERCEL_TOKEN }}" --yes

  # Post-deployment health checks
  health-check:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Health check staging deployment
        run: |
          echo "Running health checks on staging deployment..."
          # Add your health check logic here
          curl -f https://brx-staging.vercel.app/api/health || exit 1
          echo "✅ Staging deployment health check passed"