name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Development environment tests
  test-development:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'brx-app/package-lock.json'
        
      - name: Setup test environment
        working-directory: ./brx-app
        run: |
          # Create development environment file with minimal CI requirements
          cat > .env.local << 'EOF'
          # CI/CD Environment - Minimal configuration for testing
          DATABASE_URL="postgresql://test:test@localhost:5432/test_db"
          SUPABASE_URL="https://test.supabase.co"
          SUPABASE_ANON_KEY="test_anon_key"
          SUPABASE_SERVICE_ROLE_KEY="test_service_key"
          NEXTAUTH_SECRET="test-secret-for-ci"
          NEXTAUTH_URL="http://localhost:3000"
          JWT_SECRET="test-jwt-secret-for-ci"
          NODE_ENV=test
          CI=true
          NEXT_TELEMETRY_DISABLED=1
          EOF
          
      - name: Install dependencies
        working-directory: ./brx-app
        run: npm ci
        
      - name: Generate Prisma client
        working-directory: ./brx-app
        run: npm run db:generate
        
      - name: Run lint checks
        working-directory: ./brx-app
        run: npm run lint
        
      - name: Build application
        working-directory: ./brx-app
        run: npm run build
        
      - name: Run unit tests (if configured)
        working-directory: ./brx-app
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm test
          else
            echo "No unit tests configured, skipping..."
          fi

  # E2E Tests
  test-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'brx-app/package-lock.json'
        
      - name: Install dependencies
        working-directory: ./brx-app
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: ./brx-app
        run: npx playwright install --with-deps
        
      - name: Setup test environment
        working-directory: ./brx-app
        run: |
          # Create test environment file
          cat > .env.local << 'EOF'
          # E2E Test Environment
          DATABASE_URL="postgresql://test:test@localhost:5432/test_db"
          SUPABASE_URL="https://test.supabase.co"
          SUPABASE_ANON_KEY="test_anon_key"
          NEXTAUTH_SECRET="test-secret-for-ci"
          NEXTAUTH_URL="http://localhost:3000"
          NODE_ENV=test
          CI=true
          NEXT_TELEMETRY_DISABLED=1
          EOF
          
      - name: Start application for E2E tests
        working-directory: ./brx-app
        run: |
          # Start the app in background for E2E testing
          npm run build
          npm run start &
          sleep 30  # Wait for app to start
          
      - name: Run E2E tests
        working-directory: ./brx-app
        run: npx playwright test
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: brx-app/test-results/
          retention-days: 7

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'brx-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./brx-app
        run: npm ci
        
      - name: Run security audit
        working-directory: ./brx-app
        run: npm audit --audit-level high
        
      - name: Check for hardcoded secrets
        run: |
          echo "Scanning for potential hardcoded secrets..."
          # Check for common secret patterns (excluding 1Password references)
          if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]*['\"]" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" | grep -v "op://"; then
            echo "⚠️ Potential hardcoded secrets found!"
            exit 1
          else
            echo "✅ No hardcoded secrets detected"
          fi
          
      - name: Validate 1Password references
        run: |
          echo "Validating 1Password secret references..."
          # Check that all environment files use proper 1Password references
          find . -name ".env*" -not -path "./node_modules/*" -exec grep -H "=" {} \; | while read line; do
            if echo "$line" | grep -v "op://" | grep -E "(password|secret|key|token).*=" | grep -v "NODE_ENV\|CI\|NEXT_TELEMETRY"; then
              echo "⚠️ Non-1Password secret reference found: $line"
              exit 1
            fi
          done
          echo "✅ All secret references use 1Password format"

  # 1Password setup and secret retrieval
  setup-1password:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      vercel-org-id: ${{ steps.fetch-secrets.outputs.vercel-org-id }}
      vercel-project-id: ${{ steps.fetch-secrets.outputs.vercel-project-id }}
      vercel-token: ${{ steps.fetch-secrets.outputs.vercel-token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1
        
      - name: Configure 1Password Service Account
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          VERCEL_ORG_ID: "op://vault/vercel/org-id"
          VERCEL_PROJECT_ID: "op://vault/vercel/project-id"
          VERCEL_TOKEN: "op://vault/vercel/token"
          
      - name: Output secrets for other jobs
        id: fetch-secrets
        run: |
          echo "vercel-org-id=$VERCEL_ORG_ID" >> $GITHUB_OUTPUT
          echo "vercel-project-id=$VERCEL_PROJECT_ID" >> $GITHUB_OUTPUT
          echo "vercel-token=$VERCEL_TOKEN" >> $GITHUB_OUTPUT

  # Deploy to staging
  deploy-staging:
    needs: [test-development, test-e2e, security-audit, setup-1password]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'brx-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./brx-app
        run: npm ci
        
      - name: Build for staging
        working-directory: ./brx-app
        run: npm run build
        
      - name: Deploy to Vercel (Staging)
        working-directory: ./brx-app
        run: |
          npx vercel --token="${{ needs.setup-1password.outputs.vercel-token }}" \
                    --org="${{ needs.setup-1password.outputs.vercel-org-id }}" \
                    --project="${{ needs.setup-1password.outputs.vercel-project-id }}" \
                    --yes

  # Deploy to production
  deploy-production:
    needs: [test-development, test-e2e, security-audit, setup-1password]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'brx-app/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./brx-app
        run: npm ci
        
      - name: Build for production
        working-directory: ./brx-app
        run: npm run build
        
      - name: Deploy to Vercel (Production)
        working-directory: ./brx-app
        run: |
          npx vercel --prod --token="${{ needs.setup-1password.outputs.vercel-token }}" \
                           --org="${{ needs.setup-1password.outputs.vercel-org-id }}" \
                           --project="${{ needs.setup-1password.outputs.vercel-project-id }}" \
                           --yes
      
      - name: Deployment notification
        run: |
          echo "✅ Successfully deployed to production"
          echo "🔗 Check your Vercel dashboard for deployment details"
