#!/bin/bash

# 1Password Workflow Management Script
# Provides maximum autonomy for AI agents and development workflows
# Author: AI Development Guru Setup
# Version: 2.0

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
OP_CONFIG_FILE="$PROJECT_ROOT/.op-config.yaml"
SESSION_FILE="$HOME/.op-session-brx"
LOG_FILE="$PROJECT_ROOT/logs/op-workflow.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging function
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${timestamp} [${level}] ${message}" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    log "ERROR" "$1"
    exit 1
}

# Success message
success() {
    log "SUCCESS" "${GREEN}$1${NC}"
}

# Warning message
warning() {
    log "WARNING" "${YELLOW}$1${NC}"
}

# Info message
info() {
    log "INFO" "${BLUE}$1${NC}"
}

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOG_FILE")"

# Function to check prerequisites
check_prerequisites() {
    info "🔍 Checking prerequisites..."
    
    # Check if 1Password CLI is installed
    if ! command -v op &> /dev/null; then
        error_exit "1Password CLI (op) is not installed. Install from: https://developer.1password.com/docs/cli/get-started/"
    fi
    
    # Check 1Password CLI version (require 2.0+)
    local op_version=$(op --version | cut -d. -f1)
    if [[ "$op_version" -lt 2 ]]; then
        error_exit "1Password CLI version 2.0+ required. Current version: $(op --version)"
    fi
    
    success "✅ Prerequisites met. 1Password CLI version: $(op --version)"
}

# Function to establish or verify 1Password session
ensure_op_session() {
    info "🔐 Ensuring 1Password session..."
    
    # Check if already signed in
    if op account list &> /dev/null; then
        success "✅ Already signed in to 1Password"
        return 0
    fi
    
    # Try to sign in
    info "🔑 Signing in to 1Password CLI..."
    if ! op signin --raw > "$SESSION_FILE" 2>/dev/null; then
        error_exit "Failed to sign in to 1Password CLI. Please run 'op signin' manually first."
    fi
    
    # Export session token
    export OP_SESSION_my=$(cat "$SESSION_FILE")
    success "✅ 1Password session established"
}

# Function to inject environment variables
inject_env_vars() {
    local env_type="${1:-development}"
    info "💉 Injecting environment variables for: $env_type"
    
    case "$env_type" in
        "development"|"dev")
            inject_development_env
            ;;
        "production"|"prod")
            inject_production_env
            ;;
        "staging")
            inject_staging_env
            ;;
        *)
            error_exit "Unknown environment type: $env_type"
            ;;
    esac
}

# Function to inject development environment variables
inject_development_env() {
    local env_file="$PROJECT_ROOT/brx-app/.env.local"
    
    info "📝 Creating development environment file: $env_file"
    
    cat > "$env_file" << 'EOF'
# Auto-generated by op-workflow.sh - DO NOT EDIT MANUALLY
# This file is generated from 1Password secrets for maximum security

# Database & Infrastructure
DATABASE_URL="op://Development Credentials/BRX Database/connection_string"
REDIS_URL="op://Development Credentials/Redis Connection/url"
SUPABASE_URL="op://Development Credentials/Supabase/url"
SUPABASE_ANON_KEY="op://Development Credentials/Supabase/anon_key"
SUPABASE_SERVICE_ROLE_KEY="op://Development Credentials/Supabase/service_role_key"

# AI & ML Services
OPENAI_API_KEY="op://Development Credentials/OPENAI_API_KEY/credential"
ANTHROPIC_API_KEY="op://Development Credentials/Anthropic API/api_key"
PINECONE_API_KEY="op://Development Credentials/Pinecone/api_key"
PINECONE_ENVIRONMENT="op://Development Credentials/Pinecone/environment"

# External APIs
FIRECRAWL_API_KEY="op://Development Credentials/FIRECRAWL_API_KEY/credential"
BRX_API_TOKEN="op://Development Credentials/BRX API Credentials/API_TOKEN"
BRX_BEARER_TOKEN="op://Development Credentials/BRX API Credentials/BEARER_TOKEN"
BRX_API_DOCS_USERNAME="op://Development Credentials/BRX API Credentials/BRX_API_DOCS_USERNAME"
BRX_API_DOCS_PASSWORD="op://Development Credentials/BRX API Credentials/BRX_API_DOCS_PASSWORD"
BRX_API_BASE_URL="op://Development Credentials/BRX API Credentials/baseUrl"
BRX_USERNAME="op://Development Credentials/BRX Admin Credentials/username"
BRX_PASSWORD="op://Development Credentials/BRX Admin Credentials/password"

# Authentication & Security
NEXTAUTH_SECRET="op://Development Credentials/NextAuth/secret"
NEXTAUTH_URL="op://Development Credentials/NextAuth/url"
JWT_SECRET="op://Development Credentials/JWT Secrets/secret"
ENCRYPTION_KEY="op://Development Credentials/Encryption Keys/primary_key"

# Development Settings
NODE_ENV=development
NEXT_TELEMETRY_DISABLED=1
VERCEL_ENV=development

# AI Agent Configuration
AI_AGENT_AUTONOMOUS=true
AI_AGENT_SESSION_TIMEOUT=7200
EOF

    success "✅ Development environment variables injected"
}

# Function to inject production environment variables
inject_production_env() {
    warning "⚠️  Production environment injection requires additional authentication"
    info "🔐 Switching to production vault..."
    
    # Production environment setup would go here
    # This is a placeholder for production-specific logic
    echo "Production environment injection not yet implemented"
}

# Function to inject staging environment variables
inject_staging_env() {
    info "🧪 Setting up staging environment..."
    # Staging environment setup would go here
    echo "Staging environment injection not yet implemented"
}

# Function to validate credentials
validate_credentials() {
    info "✅ Validating credentials..."
    
    local validation_count=0
    local total_validations=5
    
    # Validate database connection
    if validate_database; then
        ((validation_count++))
        success "✅ Database connection valid"
    else
        warning "⚠️  Database connection failed"
    fi
    
    # Validate API keys
    if validate_openai_key; then
        ((validation_count++))
        success "✅ OpenAI API key valid"
    else
        warning "⚠️  OpenAI API key validation failed"
    fi
    
    # Validate Supabase connection
    if validate_supabase; then
        ((validation_count++))
        success "✅ Supabase connection valid"
    else
        warning "⚠️  Supabase connection failed"
    fi
    
    # Validate FireCrawl API
    if validate_firecrawl; then
        ((validation_count++))
        success "✅ FireCrawl API key valid"
    else
        warning "⚠️  FireCrawl API key validation failed"
    fi
    
    # Validate BRX API
    if validate_brx_api; then
        ((validation_count++))
        success "✅ BRX API credentials valid"
    else
        warning "⚠️  BRX API credentials validation failed"
    fi
    
    info "📊 Validation Summary: $validation_count/$total_validations credentials valid"
    
    if [[ $validation_count -eq $total_validations ]]; then
        success "🎉 All credentials validated successfully!"
        return 0
    else
        warning "⚠️  Some credentials failed validation. Check logs for details."
        return 1
    fi
}

# Individual validation functions
validate_database() {
    # Placeholder for database validation
    return 0
}

validate_openai_key() {
    # Placeholder for OpenAI API validation
    return 0
}

validate_supabase() {
    # Placeholder for Supabase validation
    return 0
}

validate_firecrawl() {
    # Placeholder for FireCrawl API validation
    return 0
}

validate_brx_api() {
    # Placeholder for BRX API validation
    return 0
}

# Function to start development environment
start_development() {
    info "🚀 Starting development environment..."
    
    ensure_op_session
    inject_env_vars "development"
    validate_credentials
    
    # Change to brx-app directory and start development server
    cd "$PROJECT_ROOT/brx-app"
    
    info "📦 Installing dependencies..."
    npm install --silent
    
    info "🔧 Running database migrations..."
    npm run db:push
    
    info "🎯 Starting development server..."
    success "✅ Development environment ready!"
    
    # Start the development server with 1Password integration
    exec op run --env-file=".env.local" -- npm run dev
}

# Function to run with 1Password integration
run_with_op() {
    local env_file="$PROJECT_ROOT/brx-app/.env.local"
    local command="$*"
    
    ensure_op_session
    
    if [[ ! -f "$env_file" ]]; then
        inject_env_vars "development"
    fi
    
    info "🔐 Running command with 1Password secrets: $command"
    cd "$PROJECT_ROOT/brx-app"
    exec op run --env-file=".env.local" -- $command
}

# Function to rotate development credentials
rotate_dev_credentials() {
    warning "🔄 Rotating development credentials..."
    info "This will generate new API keys and update 1Password vault"
    
    read -p "Are you sure you want to rotate development credentials? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "Credential rotation cancelled"
        return 0
    fi
    
    # Placeholder for credential rotation logic
    info "Credential rotation not yet implemented"
}

# Function to setup AI agent permissions
setup_ai_agent() {
    info "🤖 Setting up AI agent permissions..."
    
    # Create AI agent configuration
    local ai_config_file="$PROJECT_ROOT/.ai-agent-config.json"
    
    cat > "$ai_config_file" << 'EOF'
{
  "version": "2.0",
  "ai_agent": {
    "autonomous_access": true,
    "session_management": {
      "auto_signin": true,
      "session_timeout": 7200,
      "refresh_threshold": 300
    },
    "permissions": {
      "allowed_operations": [
        "read_secrets",
        "inject_env_vars", 
        "validate_credentials",
        "start_development",
        "run_tests",
        "deploy_staging"
      ],
      "restricted_operations": [
        "rotate_production_keys",
        "delete_vault_items",
        "modify_vault_permissions",
        "production_deployment"
      ]
    },
    "workflows": {
      "development_start": {
        "auto_inject_env": true,
        "validate_on_start": true,
        "start_services": ["database", "redis", "api"]
      },
      "testing": {
        "use_test_credentials": true,
        "isolated_environment": true
      }
    }
  }
}
EOF
    
    success "✅ AI agent configuration created: $ai_config_file"
}

# Function to show status
show_status() {
    info "📊 1Password Integration Status"
    echo "=================================="
    
    # Check 1Password CLI
    if command -v op &> /dev/null; then
        echo "🔐 1Password CLI: ✅ Installed ($(op --version))"
    else
        echo "🔐 1Password CLI: ❌ Not installed"
    fi
    
    # Check session
    if op account list &> /dev/null; then
        echo "🔑 1Password Session: ✅ Active"
    else
        echo "🔑 1Password Session: ❌ Not active"
    fi
    
    # Check environment files
    local env_file="$PROJECT_ROOT/brx-app/.env.local"
    if [[ -f "$env_file" ]]; then
        echo "📝 Environment File: ✅ Present"
        echo "   Location: $env_file"
        echo "   Size: $(wc -l < "$env_file") lines"
    else
        echo "📝 Environment File: ❌ Missing"
    fi
    
    # Check configuration
    if [[ -f "$OP_CONFIG_FILE" ]]; then
        echo "⚙️  Configuration: ✅ Present"
    else
        echo "⚙️  Configuration: ❌ Missing"
    fi
    
    echo "=================================="
}

# Function to clean up
cleanup() {
    info "🧹 Cleaning up temporary files..."
    
    # Remove session file
    if [[ -f "$SESSION_FILE" ]]; then
        rm -f "$SESSION_FILE"
        info "Removed session file"
    fi
    
    success "✅ Cleanup completed"
}

# Main function
main() {
    local command="${1:-help}"
    
    case "$command" in
        "init"|"setup")
            check_prerequisites
            ensure_op_session
            inject_env_vars "development"
            setup_ai_agent
            success "🎉 1Password integration setup complete!"
            ;;
        "start"|"dev")
            start_development
            ;;
        "inject")
            local env_type="${2:-development}"
            ensure_op_session
            inject_env_vars "$env_type"
            ;;
        "validate")
            ensure_op_session
            validate_credentials
            ;;
        "run")
            shift
            run_with_op "$@"
            ;;
        "rotate")
            rotate_dev_credentials
            ;;
        "status")
            show_status
            ;;
        "cleanup")
            cleanup
            ;;
        "help"|*)
            cat << 'EOF'
🔐 1Password Workflow Management Script

USAGE:
  ./op-workflow.sh <command> [options]

COMMANDS:
  init, setup     Initialize 1Password integration
  start, dev      Start development environment with 1Password
  inject [env]    Inject environment variables (development|production|staging)
  validate        Validate all credentials
  run <command>   Run command with 1Password secrets
  rotate          Rotate development credentials
  status          Show integration status
  cleanup         Clean up temporary files
  help            Show this help message

EXAMPLES:
  ./op-workflow.sh init                    # Setup integration
  ./op-workflow.sh start                   # Start development
  ./op-workflow.sh run npm test            # Run tests with secrets
  ./op-workflow.sh inject production       # Inject production env vars
  ./op-workflow.sh validate                # Validate all credentials

AI AGENT USAGE:
  This script is designed for maximum AI agent autonomy.
  All operations are logged and can be run without user interaction.

For more information, see: https://developer.1password.com/docs/cli/
EOF
            ;;
    esac
}

# Run main function with all arguments
main "$@"