#!/bin/bash

# 1Password Agent Tools - Functions for Cursor AI to search and manage credentials
# These functions can be called by the agent to automate credential management

# Search for items in 1Password by name/title
search_1password() {
    local query="$1"
    echo "🔍 Searching 1Password for: $query"
    
    # Search items and format as JSON for easy parsing
    op item list --format json | jq -r --arg q "$query" '.[] | select(.title | test($q; "i")) | "\(.vault.name)/\(.title) [\(.category)]"' | sort
}

# Get all available credentials with their references
list_all_credentials() {
    echo "📋 Listing all available 1Password items:"
    
    # List all items with vault, title, and category
    op item list --format json | jq -r '.[] | "\(.vault.name)/\(.title) [\(.category)]"' | sort
}

# Get secret reference for a specific item and field
get_secret_reference() {
    local item_name="$1"
    local field_name="${2:-password}"  # Default to password field
    
    # Get item details and construct reference
    local item_json=$(op item list --format json | jq -r --arg name "$item_name" '.[] | select(.title == $name)')
    
    if [ -z "$item_json" ]; then
        echo "❌ Item '$item_name' not found"
        return 1
    fi
    
    local vault_name=$(echo "$item_json" | jq -r '.vault.name')
    local item_title=$(echo "$item_json" | jq -r '.title')
    
    echo "op://$vault_name/$item_title/$field_name"
}

# Get all fields for a specific item
get_item_fields() {
    local item_name="$1"
    
    echo "📄 Getting fields for item: $item_name"
    
    # Get full item details
    op item get "$item_name" --format json 2>/dev/null | jq -r '
        .fields[]? | 
        select(.value != null and .value != "") | 
        "\(.label // .id): \(.reference)"
    '
}

# Generate .env file with 1Password references
generate_env_file() {
    local output_file="${1:-.env.1password}"
    
    echo "🔨 Generating $output_file with 1Password references..."
    
    cat > "$output_file" << 'EOF'
# Auto-generated 1Password environment file
# Generated by Cursor AI on $(date)
# Format: VARIABLE="op://VaultName/ItemName/FieldName"

EOF
    
    # Common patterns to search for
    local patterns=(
        "database|postgres|mysql|mongodb"
        "api.*key|token"
        "openai|anthropic|claude"
        "github|gitlab"
        "aws|gcp|azure"
        "redis|cache"
        "stripe|payment"
        "email|smtp"
        "auth|secret"
    )
    
    echo "# ===== Detected Credentials =====" >> "$output_file"
    
    for pattern in "${patterns[@]}"; do
        local items=$(op item list --format json | jq -r --arg p "$pattern" '.[] | select(.title | test($p; "i")) | .title' | sort -u)
        
        if [ -n "$items" ]; then
            echo "" >> "$output_file"
            echo "# $pattern credentials:" >> "$output_file"
            
            while IFS= read -r item; do
                local vault=$(op item list --format json | jq -r --arg t "$item" '.[] | select(.title == $t) | .vault.name' | head -1)
                local var_name=$(echo "$item" | tr '[:lower:]' '[:upper:]' | tr ' -' '_' | sed 's/[^A-Z0-9_]//g')
                
                # Try to guess the field name
                case "$item" in
                    *[Aa][Pp][Ii]*)
                        echo "${var_name}_KEY=\"op://$vault/$item/api_key\"" >> "$output_file"
                        ;;
                    *[Dd]atabase*|*[Pp]ostgres*|*[Mm]ysql*)
                        echo "${var_name}_URL=\"op://$vault/$item/url\"" >> "$output_file"
                        ;;
                    *)
                        echo "${var_name}=\"op://$vault/$item/password\"" >> "$output_file"
                        ;;
                esac
            done <<< "$items"
        fi
    done
    
    echo "" >> "$output_file"
    echo "✅ Generated $output_file with $(grep -c '^[A-Z]' "$output_file") environment variables"
}

# Search for credentials matching project requirements
search_project_credentials() {
    local project_dir="${1:-.}"
    
    echo "🔎 Analyzing project for required credentials..."
    
    # Search for environment variable usage in code
    local env_vars=$(grep -r "process\.env\.\|os\.environ\[\|getenv\|ENV\[" "$project_dir" 2>/dev/null | \
        grep -oE "[A-Z_]+_(KEY|TOKEN|SECRET|URL|PASSWORD|USERNAME|ID)" | \
        sort -u)
    
    if [ -z "$env_vars" ]; then
        echo "No environment variables found in code"
        return 1
    fi
    
    echo "Found environment variables in code:"
    echo "$env_vars"
    echo ""
    echo "Searching 1Password for matching credentials..."
    
    while IFS= read -r var; do
        # Convert variable name to search term
        local search_term=$(echo "$var" | tr '_' ' ' | sed 's/KEY$//' | sed 's/TOKEN$//' | sed 's/URL$//' | sed 's/SECRET$//')
        
        echo ""
        echo "Variable: $var"
        echo "Searching for: $search_term"
        
        # Search 1Password
        local matches=$(op item list --format json | jq -r --arg s "$search_term" '.[] | select(.title | test($s; "i")) | "\(.vault.name)/\(.title)"' | head -3)
        
        if [ -n "$matches" ]; then
            echo "Possible matches:"
            echo "$matches" | sed 's/^/  - /'
        else
            echo "  No matches found"
        fi
    done <<< "$env_vars"
}

# Update existing .env file with 1Password references
update_env_with_1password() {
    local env_file="${1:-.env}"
    local backup_file="${env_file}.backup.$(date +%Y%m%d_%H%M%S)"
    
    if [ ! -f "$env_file" ]; then
        echo "❌ File $env_file not found"
        return 1
    fi
    
    echo "📝 Updating $env_file with 1Password references..."
    
    # Backup original
    cp "$env_file" "$backup_file"
    echo "Backed up to: $backup_file"
    
    # Create new file with 1Password references
    local new_file="${env_file}.1password"
    echo "# Converted to 1Password references on $(date)" > "$new_file"
    echo "" >> "$new_file"
    
    # Process each line
    while IFS= read -r line; do
        if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "$line" ]]; then
            # Keep comments and empty lines
            echo "$line" >> "$new_file"
        elif [[ "$line" =~ ^([A-Z_]+)=(.*)$ ]]; then
            local var_name="${BASH_REMATCH[1]}"
            local var_value="${BASH_REMATCH[2]}"
            
            # Search for matching 1Password item
            echo "Processing: $var_name"
            
            # Try to find a matching item
            local search_term=$(echo "$var_name" | tr '_' ' ' | sed 's/KEY$//' | sed 's/TOKEN$//' | sed 's/URL$//')
            local match=$(op item list --format json | jq -r --arg s "$search_term" '.[] | select(.title | test($s; "i")) | .title' | head -1)
            
            if [ -n "$match" ]; then
                local vault=$(op item list --format json | jq -r --arg t "$match" '.[] | select(.title == $t) | .vault.name' | head -1)
                
                # Determine field name based on variable name
                local field="password"
                case "$var_name" in
                    *_KEY|*_API_KEY) field="api_key" ;;
                    *_TOKEN) field="token" ;;
                    *_URL|*_URI) field="url" ;;
                    *_SECRET) field="secret" ;;
                    *_USERNAME) field="username" ;;
                    *_PASSWORD) field="password" ;;
                esac
                
                echo "$var_name=\"op://$vault/$match/$field\"" >> "$new_file"
                echo "  ✓ Mapped to: op://$vault/$match/$field"
            else
                # Keep original if no match found
                echo "$line" >> "$new_file"
                echo "  ⚠️  No 1Password match found, keeping original"
            fi
        else
            echo "$line" >> "$new_file"
        fi
    done < "$env_file"
    
    echo ""
    echo "✅ Created $new_file with 1Password references"
    echo "To use: op run --env-file=$new_file -- <command>"
}

# Main function to display usage
if [ "$#" -eq 0 ]; then
    echo "1Password Agent Tools - Available functions:"
    echo ""
    echo "  search_1password <query>         - Search for items by name"
    echo "  list_all_credentials             - List all available credentials"
    echo "  get_secret_reference <item>      - Get reference for specific item"
    echo "  get_item_fields <item>           - Get all fields for an item"
    echo "  generate_env_file [output]       - Auto-generate .env with references"
    echo "  search_project_credentials [dir] - Find credentials needed by project"
    echo "  update_env_with_1password [file] - Convert existing .env to use 1Password"
    echo ""
    echo "Usage: $0 <function> [args...]"
else
    # Execute the requested function
    "$@"
fi